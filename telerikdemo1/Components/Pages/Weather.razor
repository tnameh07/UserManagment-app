@page "/weather"
@rendermode InteractiveServer

<TelerikContainer>
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<TelerikGrid Data="forecasts" Sortable="true" Pageable="true" PageSize="2"  FilterMode="GridFilterMode.FilterMenu"
              >
<GridColumns> 
    <GridColumn Field="@nameof(WeatherForecast.Date)"></GridColumn>
    <GridColumn Field="@nameof(WeatherForecast.TemperatureC)" Title="Temp (C)"></GridColumn>
    <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" Title="Temp (F)"></GridColumn>
    <GridColumn Field="@nameof(WeatherForecast.Summary)"></GridColumn>
</GridColumns>

</TelerikGrid>
</TelerikContainer>
@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
       try
{
    forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
    {
        Date = startDate.AddDays(index),
        TemperatureC = Random.Shared.Next(-20, 55),
        Summary = summaries[Random.Shared.Next(summaries.Length)]
    }).ToArray();
}
catch (Exception ex)
{
    Console.WriteLine($"Error initializing forecasts: {ex.Message}");
}
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
