@using telerikdemo1.DataAccess.Services
@using telerikdemo1.DataAccess.Dto
@page "/grid/overview"
@page "/grid/index"

@rendermode InteractiveServer
@using Telerik.DataSource;

@inject HttpClient http
<TelerikContainer>
<TelerikGrid Class="grid"
             Data=@Products
             OnUpdate="@UpdateHandler"
             OnDelete="@DeleteHandler"
             OnCreate="@CreateHandler"
             ConfirmDelete="true"
             Pageable="true"
             Groupable="true"
             Sortable="true"
             FilterMode="GridFilterMode.FilterMenu"
             Resizable="true"
             Reorderable="true"
             EditMode="GridEditMode.Popup"
             SelectionMode="GridSelectionMode.Multiple"
             OnStateInit="@((GridStateEventArgs<ProductDto> args) => OnStateInit(args))"
             PageSize="10"
             Navigable="true">
    <GridColumns>
        <GridCheckboxColumn></GridCheckboxColumn>
        <GridColumn Field="@nameof(ProductDto.ProductName)" Title="Product Name" Width="195px" />
        <GridColumn Field="@nameof(ProductDto.UnitPrice)" Width="120px" Title="Cost" TextAlign="@ColumnTextAlign.Right">
            <Template>
                    @((context as ProductDto).UnitPrice.GetValueOrDefault().ToString("C2"))
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(ProductDto.Discontinued)" Width="135px" Title="Discontinued" Editable="false" TextAlign="@ColumnTextAlign.Center">
            <Template>
                @{
                    var product = context as ProductDto;

                    if (product.Discontinued.GetValueOrDefault())
                    {
                        <span class="k-badge k-badge-md k-badge-solid k-badge-solid-error k-rounded-md">Discontinued</span>
                    }
                    else
                    {
                        <span class="k-badge k-badge-md k-badge-solid k-badge-solid-success k-rounded-md">Available</span>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(ProductDto.CategoryId)" Title="Category" Width="140px">
            <Template>
                @{
                    var product = context as ProductDto;
                    var categoryName = Categories.FirstOrDefault(c => c.CategoryId == product.CategoryId)?.CategoryName;
                    @categoryName;
                }
            </Template>
            <EditorTemplate>
                @{
                    var product = context as ProductDto;
                    <TelerikDropDownList Data="@Categories"
                                         @bind-Value="@product.CategoryId"
                                         DefaultText="Choose Category"
                                         TextField="CategoryName"
                                         ValueField="CategoryId">
                    </TelerikDropDownList>
                }
            </EditorTemplate>
            <FilterMenuTemplate>
                @{
                    <div class="filter-values-container">
                        @foreach (var category in Categories)
                        {
                            <div>
                                <TelerikCheckBox Value="@(GetFilterValues(context.FilterDescriptor).Contains(category.CategoryId))"
                                                 ValueChanged="@((bool value) => ColumnValueChanged(value, category.CategoryId, context.FilterDescriptor))"
                                                 Id="@($"name_{category.CategoryId}")">
                                </TelerikCheckBox>
                                <label for="@($"name_{category.CategoryId}")">
                                    @category.CategoryName
                                </label>
                            </div>
                        }
                    </div>
                }
            </FilterMenuTemplate>
            <GroupHeaderTemplate>
                @{
                    if (context.Value != null)
                    {
                        <span>Category: @Categories.FirstOrDefault(c => c.CategoryId == (int)context.Value).CategoryName</span>
                    }
                    else
                    {
                        <span>No Category</span>
                    }
                }
            </GroupHeaderTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(ProductDto.UnitsInStock)" Title="In Stock" Width="170px">
            <Template>
                @{
                    var product = context as ProductDto;
                    var value = product.UnitsInStock.GetValueOrDefault();
                }
                <TelerikProgressBar Class="width-100" Max="125" Value="(double)value">
                    <ProgressBarLabel Visible="true" Position="@ProgressBarLabelPosition.Center">
                        <Template Context="progressBarContext">
                            @if (value > 125)
                            {
                                <span style="font-weight:bold">Over 125 in stock</span>
                            }
                            else
                            {
                                <span>In stock:<span style="font-weight:bold">@(progressBarContext.Value)</span></span>
                            }
                        </Template>
                    </ProgressBarLabel>
                </TelerikProgressBar>
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(ProductDto.QuantityPerUnit)" Title="Quantity Per Unit" Width="200px" />
        <GridCommandColumn Width="260px">
            <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    <GridToolBarTemplate>
        <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add Product</GridCommandButton>
    </GridToolBarTemplate>
</TelerikGrid>
</TelerikContainer>
@code {
    private CategoryService _categoryService;
    private CategoryService CategoryService
    {
        get
        {
            if(_categoryService == null)
            {
                _categoryService = new CategoryService(http);
            }

            return _categoryService;
        }
    }
    private ProductService _productService;
    private ProductService ProductService
    {
        get
        {
            if(_productService == null)
            {
                _productService = new ProductService(http);
            }

            return _productService;
        }
    }
    public List<ProductDto> Products { get; set; }
    public List<CategoryDto> Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Products = (await ProductService.GetProducts()).ToList();
        Categories = (await CategoryService.GetCategories()).ToList();
    }

    private void OnStateInit(GridStateEventArgs<ProductDto> args)
    {
        args.GridState.GroupDescriptors = new List<GroupDescriptor>()
        {
            new GroupDescriptor()
            {
                Member = nameof(ProductDto.CategoryId),
                MemberType = typeof(int)
            }
        };
    }

    public async Task UpdateHandler(GridCommandEventArgs args)
    {
        var product = (ProductDto)args.Item;
        product.CategoryName = Categories.FirstOrDefault(c => c.CategoryId == product.CategoryId)?.CategoryName;
        ProductService.UpdateProduct(product);
        await LoadData();
    }

    public async Task DeleteHandler(GridCommandEventArgs args)
    {
        ProductService.DeleteProduct((ProductDto)args.Item);
        await LoadData();
    }

    public async Task CreateHandler(GridCommandEventArgs args)
    {
        var product = (ProductDto)args.Item;
        product.CategoryName = Categories.FirstOrDefault(c => c.CategoryId == product.CategoryId)?.CategoryName;
        ProductService.CreateProduct(product);
        await LoadData();
    }

    public List<int?> GetFilterValues(CompositeFilterDescriptor filterDescriptor)
    {
        return filterDescriptor.FilterDescriptors.Select(f => (int?)(f as FilterDescriptor).Value).ToList();
    }

    public void ColumnValueChanged(bool value, int categoryId, CompositeFilterDescriptor filterDescriptor)
    {
        var filter = filterDescriptor.FilterDescriptors.FirstOrDefault(f => categoryId.Equals((f as FilterDescriptor).Value));

        filterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.Or;

        if (value && filter == null)
        {
            filterDescriptor.FilterDescriptors.Add(new FilterDescriptor(nameof(ProductDto.CategoryId), FilterOperator.IsEqualTo, categoryId));
        }
        else if (!value && filter != null)
        {
            filterDescriptor.FilterDescriptors.Remove(filter);
        }
    }
}

<style>
    .width-100 {
        width: 100%;
    }
    .grid .k-grid-content tr {
        line-height: 32px;
    }
</style>